services:
  auth-db:
    image: postgres:15
    container_name: auth-db
    restart: always
    environment:
      POSTGRES_DB: ${AUTH_POSTGRES_DB}
      POSTGRES_USER: ${AUTH_POSTGRES_USER}
      POSTGRES_PASSWORD: ${AUTH_POSTGRES_PASSWORD}
    networks: [app-network]
    ports:
      - "5433:5432" # external:internal
    volumes:
      - auth_data:/var/lib/postgresql/data

  profile-db:
    image: postgres:15
    container_name: profile-db
    restart: always
    environment:
      POSTGRES_DB: ${PROFILE_POSTGRES_DB}
      POSTGRES_USER: ${PROFILE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${PROFILE_POSTGRES_PASSWORD}
    networks: [app-network]
    ports:
      - "5434:5432"
    volumes:
      - profile_data:/var/lib/postgresql/data

  post-db:
    image: mongo:6
    container_name: post-db
    restart: always
    volumes:
      - mongodata:/data/db
    networks: [app-network]
    ports:
      - "27017:27017"

  redis:
    image: redis:7
    restart: always
    networks: [app-network]
    ports:
      - "6379:6379"

  # ----------------------------------------------------------------
  # Services
  # ----------------------------------------------------------------
  auth:
    build: ./services/auth
    env_file: .env
    environment:
      JWT_SECRET: ${JWT_SECRET}
      DATABASE_URL: ${AUTH_DATABASE_URL}
    depends_on: [auth-db]
    networks: [app-network]
    ports:
      - "4003:4003"

  profile:
    build: ./services/profile
    env_file: .env
    environment:
      DATABASE_URL: ${PROFILE_DATABASE_URL}
      PORT: 4002
    depends_on: [profile-db]
    networks: [app-network]
    ports:
      - "4002:4002"

  pgadmin:
    image: dpage/pgadmin4
    container_name: my-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: adminpassword
    ports:
      - "8080:80" # Map host port 8080 to container port 80
    depends_on: [auth-db, profile-db]
    networks: [app-network]
    volumes:
      - ./pgadmin/servers.json:/pgadmin4/servers.json:ro  # pre-load servers
      - pgadmin_data:/var/lib/pgadmin

  post:
    build: ./services/post
    env_file: .env
    depends_on: [post-db]
    networks: [app-network]
    ports:
      - "4001:4001"

  graphql-gateway:
    build: ./graphql-gateway
    depends_on: [profile, post]
    networks: [app-network]
    environment:
      POST_SERVICE_URL: ${POST_SERVICE_URL}
      PROFILE_SERVICE_URL: ${PROFILE_SERVICE_URL}
      SEARCH_SERVICE_URL: ${SEARCH_SERVICE_URL}
    ports:
      - "4000:4000"

  reverse-proxy:
    image: nginx:stable
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - profile
      - post
      # - feed
      # - notification
      # - messaging
      # - search
    networks: [app-network]


networks:
  app-network:
    driver: bridge

volumes:
  auth_data:
  post_data:
  profile_data:
  mongodata:
  pgadmin_data:

  # kafka_data:

  # rabbitmq:
  #   image: rabbitmq:3-management
  #   restart: always
  #   ports:
  #     - "15672:15672"
  #     - "5672:5672"
  #   networks: [app-network]

  # kafka:
  #   image: bitnami/kafka:3.7
  #   restart: always
  #   ports:
  #     - "9092:9092"
  #   environment:
  #     KAFKA_CFG_NODE_ID: 1
  #     KAFKA_CFG_PROCESS_ROLES: "broker,controller"
  #     KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
  #     KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
  #     KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
  #     KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
  #     KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
  #     KAFKA_CFG_LOG_DIRS: "/bitnami/kafka/data"
  #     ALLOW_PLAINTEXT_LISTENER: yes
  #   volumes:
  #     - kafka_data:/bitnami/kafka
  #   networks: [app-network]

  # elasticsearch:
  #   image: elasticsearch:8.12.2
  #   environment:
  #     - discovery.type=single-node
  #     - xpack.security.enabled=false
  #   ports:
  #     - "9200:9200"
  #   networks: [app-network]

 # feed:
  #   build:
  #     context: ./services/feed
  #     dockerfile: Dockerfile
  #   env_file: .env
  #   depends_on: [redis, rabbitmq]
  #   networks: [app-network]
  #   ports:
  #     - "4002:4002"

  # notification:
  #   build: ./services/notification
  #   env_file: .env
  #   depends_on: [kafka]
  #   networks: [app-network]
  #   ports:
  #     - "4003:4003"

  # messaging:
  #   build: ./services/messaging
  #   env_file: .env
  #   networks: [app-network]
  #   ports:
  #     - "4004:4004"

  # search:
  #   build: ./services/search
  #   env_file: .env
  #   depends_on: [elasticsearch]
  #   networks: [app-network]
  #   ports:
  #     - "4005:4005"
    # frontend:
    #   build: ./frontend
    #   ports:
    #     - "3000:3000"
    #   env_file: .env
    #   networks: [app-network]
    #   depends_on:
    #     - reverse-proxy
    #   environment:
    #     - NEXT_PUBLIC_API_BASE=http://reverse-proxy


