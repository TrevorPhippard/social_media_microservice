services:
  postgres:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks: [app-network]
    ports:
      - "5432:5432"

  mongodb:
    image: mongo:6
    restart: always
    volumes:
      - mongodata:/data/db
    networks: [app-network]
    ports:
      - "27017:27017"

  redis:
    image: redis:7
    restart: always
    networks: [app-network]
    ports:
      - "6379:6379"

  rabbitmq:
    image: rabbitmq:3-management
    restart: always
    ports:
      - "15672:15672"
      - "5672:5672"
    networks: [app-network]

  kafka:
    image: bitnami/kafka:3.7
    restart: always
    ports:
      - "9092:9092"
    environment:
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_CFG_LOG_DIRS: "/bitnami/kafka/data"
      ALLOW_PLAINTEXT_LISTENER: yes
    volumes:
      - kafka_data:/bitnami/kafka
    networks: [app-network]

  elasticsearch:
    image: elasticsearch:8.12.2
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    networks: [app-network]

  user:
    build: ./services/user
    env_file: .env
    depends_on: [postgres]
    networks: [app-network]
    ports:
      - "4006:4006"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4006/users"]
      interval: 10s
      timeout: 5s
      retries: 5

  post:
    build: ./services/post
    env_file: .env
    depends_on: [mongodb]
    networks: [app-network]
    ports:
      - "4001:4001"

  feed:
    build:
      context: ./services/feed
      dockerfile: Dockerfile
    env_file: .env
    depends_on: [redis, rabbitmq]
    networks: [app-network]
    ports:
      - "4002:4002"

  notification:
    build: ./services/notification
    env_file: .env
    depends_on: [kafka]
    networks: [app-network]
    ports:
      - "4003:4003"

  messaging:
    build: ./services/messaging
    env_file: .env
    networks: [app-network]
    ports:
      - "4004:4004"

  search:
    build: ./services/search
    env_file: .env
    depends_on: [elasticsearch]
    networks: [app-network]
    ports:
      - "4005:4005"
  graphql-gateway:
    build: ./services/graphql-gateway
    depends_on: [user, post]
    networks: [app-network]
    ports:
      - "4000:4000"

  reverse-proxy:
    image: nginx:stable
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - user
      - post
      - feed
      - notification
      - messaging
      - search
    networks: [app-network]

    # frontend:
    #   build: ./frontend
    #   ports:
    #     - "3000:3000"
    #   env_file: .env
    #   networks: [app-network]
    #   depends_on:
    #     - reverse-proxy
    #   environment:
    #     - NEXT_PUBLIC_API_BASE=http://reverse-proxy

networks:
  app-network:

volumes:
  pgdata:
  mongodata:
  kafka_data:
